from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib import colors
from datetime import datetime
import io
import base64

class ComplianceReportGenerator:
    def __init__(self):
        self.styles = getSampleStyleSheet()
        self.title_style = ParagraphStyle(
            'CustomTitle',
            parent=self.styles['Heading1'],
            fontSize=18,
            spaceAfter=30,
            textColor=colors.darkblue
        )

    def generate_pdf_report(self, analysis_result, input_text, domain):
        buffer = io.BytesIO()
        doc = SimpleDocTemplate(buffer, pagesize=letter)
        story = []

        # Header
        story.append(Paragraph("üõ°Ô∏è CAEPA Compliance Analysis Report", self.title_style))
        story.append(Spacer(1, 12))
        
        # Metadata table
        metadata = [
            ['Analysis Date', datetime.now().strftime("%Y-%m-%d %H:%M:%S")],
            ['Compliance Domain', domain.upper()],
            ['Analysis Status', analysis_result['status']],
            ['Processing Time', f"{analysis_result['latency_ms']}ms"]
        ]
        
        metadata_table = Table(metadata, colWidths=[2*72, 4*72])
        metadata_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 12),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ]))
        
        story.append(metadata_table)
        story.append(Spacer(1, 20))

        # Input Analysis
        story.append(Paragraph("Input Content", self.styles['Heading2']))
        story.append(Paragraph(f"<pre>{input_text[:500]}...</pre>", self.styles['Code']))
        story.append(Spacer(1, 12))

        # Compliance Results
        story.append(Paragraph("Compliance Assessment", self.styles['Heading2']))
        
        status_color = colors.red if analysis_result['status'] == 'RED' else colors.orange if analysis_result['status'] == 'YELLOW' else colors.green
        story.append(Paragraph(f"<b>Status: <font color='{status_color}'>{analysis_result['status']}</font></b>", self.styles['Normal']))
        story.append(Paragraph(f"<b>Summary:</b> {analysis_result['violation_summary']}", self.styles['Normal']))
        story.append(Spacer(1, 12))

        # Detailed Reasoning
        story.append(Paragraph("Detailed Analysis", self.styles['Heading2']))
        story.append(Paragraph(analysis_result['reasoning'], self.styles['Normal']))
        story.append(Spacer(1, 12))

        # Recommendations
        story.append(Paragraph("Recommended Actions", self.styles['Heading2']))
        story.append(Paragraph(analysis_result['suggestion'], self.styles['Normal']))
        story.append(Spacer(1, 12))

        # Policy Evidence
        if analysis_result.get('evidence'):
            story.append(Paragraph("Policy References", self.styles['Heading2']))
            for evidence in analysis_result['evidence']:
                story.append(Paragraph(f"‚Ä¢ {evidence}", self.styles['Normal']))

        doc.build(story)
        buffer.seek(0)
        return buffer.getvalue()

    def generate_markdown_report(self, analysis_result, input_text, domain):
        report = f"""# üõ°Ô∏è CAEPA Compliance Analysis Report

## Analysis Metadata
- **Date**: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
- **Domain**: {domain.upper()}
- **Status**: {analysis_result['status']}
- **Processing Time**: {analysis_result['latency_ms']}ms

## Input Content
```
{input_text[:500]}...
```

## Compliance Assessment
**Status**: {analysis_result['status']}
**Summary**: {analysis_result['violation_summary']}

## Detailed Analysis
{analysis_result['reasoning']}

## Recommended Actions
{analysis_result['suggestion']}

## Policy References
"""
        if analysis_result.get('evidence'):
            for evidence in analysis_result['evidence']:
                report += f"- {evidence}\n"
        
        report += f"\n---\n*Generated by CAEPA - Context-Aware Ethical Policy Assistant*"
        return report